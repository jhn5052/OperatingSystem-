#include<stdio.h>
#include<stdlib.h>
#define MAX_VERTICES 26
int max;
int visited[MAX_VERTICES];//
int queue[MAX_VERTICES];
int front, rear;
typedef enum { false, true }bool; // boolean
#define INIT_QUEUE(){front = rear = -1;}
#define ENQUEUE(v) {queue[++front] = v;}
#define DEQUEUE() ((front >= rear) ? queue[++rear] : -1)


typedef struct _Graph {
	int nVertices; 
	int nEdges;
	int vertex[MAX_VERTICES];
	int edge[MAX_VERTICES][MAX_VERTICES]; 
} Graph;


void initGraph(Graph *g) {
	int i, j;
	g->nVertices = 0;
	g->nEdges = 0;

	for (i = 0; i < MAX_VERTICES; i++) {
		g->vertex[i] = 0;
		for (j = 0; j < MAX_VERTICES; j++) {
			g->edge[i][j] = 0;
		}
	}
}

int insertVertex(Graph *g, char v) {
	int i = 0;
	g->nVertices += 1;
	i = v-65;
	max = i;
	g->vertex[i] = 1;
}


int insertEdge(Graph *g, char v1, char v2, int weight) {
	int i, j;
	i = v1 - 65;
	j = v2 - 65;
	g->nEdges += 1;
	g->edge[i][j] = weight;
	g->edge[j][i] = weight;
}

void PrintGraph(Graph *g) {
	int i,j;
	printf("V(G) = {");
	for (i = 0; i <= max; i++) {
		if (i < max) {
			printf(" %c,", i + 65);
		}
		else if(i == max) {
			printf(" %c }\n", i + 65);
		}
	}

	printf("E(G) = {");
	
	for (i = 0; i <= max; i++) {
		for (j = 0; j <= max; j++) {
			if (g->edge[i][j] != 0) {
				if (i < j) {
					printf(" (%c,%c)", i + 65, j + 65);
				}
			}
		}
	}
	printf("}\n");
}

void dfsCore(Graph *g, int v) {
	int i;
	visited[v] = true;
	printf(" %c", v+65);
	for (i = 0; i <= max; i++) {
		if (g->edge[i][v] == 1) {
			if (visited[i] == false) {
				dfsCore(g, i);
			}
		}
	}
}

void depthFirstSearch(Graph *g, int v) {
	int i;
	for (i = 0; i <= max; i++) {
		visited[i] = false;
	}
	dfsCore(g,v);

}


int notisEmpty() {
	int i, state = false;
	for (i = 0; i <= MAX_VERTICES; i++) {
		if (queue[i] != -1) {
			state = true;
			return 1;
		}
	}
	if (state == false) {
		return 0;
	}
} 

void breadthFirstSearch(Graph *g, int v) {
	int i;
	for (i = 0; i <= max; i++) {
		visited[i] = false;
	}
	visited[v] = true;
	printf(" %c", v+65);
	ENQUEUE(v);
	while (notisEmpty()) {
		v = DEQUEUE();
		for (i = 0; i <= max; i++) {
			if (g->edge[i][v] == 1) {
				if (visited[i] == false) {
					visited[i] = true;
					printf(" %c", i + 65);
					ENQUEUE(i);
				}
			}
		}
	}
}

int main() {
	Graph G;
	initGraph(&G);
	insertVertex(&G, 'A');
	insertVertex(&G, 'B');
	insertVertex(&G, 'C');
	insertVertex(&G, 'D');
	insertVertex(&G, 'E');
	insertVertex(&G, 'F');
	insertEdge(&G, 'A', 'B', 1);
	insertEdge(&G, 'A', 'D', 1);
	insertEdge(&G, 'A', 'E', 1);
	insertEdge(&G, 'B', 'C', 1);
	insertEdge(&G, 'B', 'D', 1);
	insertEdge(&G, 'C', 'D', 1);
	insertEdge(&G, 'C', 'E', 1);
	insertEdge(&G, 'D', 'F', 1);
	insertEdge(&G, 'E', 'F', 1);
	PrintGraph(&G);
	printf("Depth First Search : ");
	depthFirstSearch(&G, 0);
	printf("\nBreadth First Search : ");
	breadthFirstSearch(&G, 0);

	while (1);
}
