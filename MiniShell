#include<sys/types.h>
#include<sys/wait.h>
#include<stdio.h>
#include<stdlib.h>
#include<string.h>
#include<unistd.h>
#include<sys/stat.h>
#include<fcntl.h>

#define MAX 100
#define PROMPT_STR " >"


void prompt() {
        printf(PROMPT_STR);
        fflush(stdout);
}

int Parse(char *, char *, char *);

int main() {
    pid_t pid;
    int num, err;          
       
    while (1) {
        char *command = (char*)calloc(100, sizeof(char));
        char *exec_name = (char *)calloc(10, sizeof(char));
        char *out_name = (char *)calloc(10, sizeof(char));
        
        prompt();
        fgets(command, MAX, stdin);
        command[strlen(command)-1]=0;
        num = Parse(command, exec_name, out_name);
        
        if (num == 0) {//foreground     
            printf("FOREGROUND\n");
            pid = fork();                       
            if (pid == 0) {        
                printf("[CHILD] foreground child\n");           
                if (err = execlp(exec_name, exec_name, NULL)) {                                 
                    printf("Some error occurs when exec.\n");
                    exit(1);
                }
            }
            else if (pid > 0) {//parent
                printf("[PARENT] Wait child process die\n");
                wait(NULL);
                printf("\n");
            }
            else if (pid == -1) {
                perror("ERROR");
                exit(1);
            }
        }
        else if (num == 1) {//background
            pid = fork();
            if (pid == 0) {
                close(1);
                if (err = execlp(exec_name, exec_name, NULL)) {
                   printf("Some error occurs when exec.\n");
                   exit(1);    
                }
            }
                
            else if (pid > 0) {
                continue; 
            }
                
            else if (pid == -1) {
                perror("ERROR\n");
                exit(1);
            }
        }
        else if (num == 2) {//output    
            int fd; 
            if ((pid=fork()) == 0) {
                close(1);//stdout close
                fd = creat(out_name,0777);
                if(dup(fd)== -1){     
                    printf("[FILE]duplicate error\n");
                    exit(1);
                }

                if (err = execlp(exec_name, exec_name, NULL)) {
                    printf("Some error occurs when exec.\n");
                    exit(1);        
                }        
            }
            else if (pid > 0) {//parent
                wait(NULL);
            }
            else if (pid == -1) {
                perror("ERROR\n");
                exit(1);
            }        
        }
        else if (num == -1) {
            exit(0);
        }
    }
}
    




int Parse(char *command, char *exec_name, char *out_name) { // return: 0 - fore, 1 - back, 2 - redirect, -1 - error
        char *p;
        char parse[MAX];
        int i, n, ret = -1;
        int l = strlen(command);        

        if ((p = strchr(command, '&')) != NULL) {
            n = (int)(p - command);
            ret = 1;                           
        }
            
        else if ((p = strchr(command, '>')) != NULL) {
            n = (int)(p - command)-1;                                
            ret = 2;                           
            for (i = n + 3; i < l; i++) {
                out_name[i - (n + 3)] = command[i];
            }    
        }
        
        else if (!strcmp(command, "exit")) {
            return -1;            
        }

        else {
            n = l;
            ret = 0;
        }
        
        for (i = 0; i < n; i++) {
            exec_name[i] = command[i];
        }
        
        return ret;

}
